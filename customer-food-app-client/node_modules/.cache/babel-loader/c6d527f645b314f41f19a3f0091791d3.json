{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/avatar/style\";\nimport _Avatar from \"antd/es/avatar\";\nimport _objectSpread from \"/home/amavi/projects/demo2/customer-food-app-client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nimport \"antd/es/radio/style\";\nimport _Radio from \"antd/es/radio\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\n\nvar _temp,\n    _jsxFileName = \"/home/amavi/projects/demo2/customer-food-app-client/src/user/profile/Profile.js\";\n\nimport React, { Component } from 'react'; // import PollList from '../../poll/PollList';\n\nimport { checkEmailAvailability, checkUsernameAvailability, getUserProfile } from '../../util/APIUtils';\nimport { getAvatarColor } from '../../util/Colors'; // import { formatDate } from '../../util/Helpers';\n\nimport LoadingIndicator from '../../common/LoadingIndicator';\nimport './Profile.css';\nimport NotFound from '../../common/NotFound';\nimport ServerError from '../../common/ServerError';\nimport { Link } from \"react-router-dom\"; // import EditProfile from '../EditProfile/EditProfile';\n\nimport Route from \"react-router-dom/es/Route\";\nimport { NAME_MIN_LENGTH, NAME_MAX_LENGTH, USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH, PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH, CONTACTNO_MAX_LENGTH, CONTACTNO_MIN_LENGTH } from '../../../src/constants';\n\nconst CollectionCreateForm = _Form.create({\n  name: 'form_in_modal'\n})(( // eslint-disable-next-line\n// class Profile extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             name: {\n//                 value: ''\n//             },\n//             username: {\n//                 value: ''\n//             },\n//             email: {\n//                 value: ''\n//             },\n//             password: {\n//                 value: ''\n//             },\n//             contactno: {\n//                 value: ''\n//             }\n//         }\n//         this.handleInputChange = this.handleInputChange.bind(this);\n//         this.handleSubmit = this.handleSubmit.bind(this);\n//         this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\n//         this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\n//         this.isFormInvalid = this.isFormInvalid.bind(this);\n//     }\n_temp = class extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.validateName = name => {\n      if (name.length < NAME_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\n        };\n      } else if (name.length > NAME_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validateEmail = email => {\n      if (!email) {\n        return {\n          validateStatus: 'error',\n          errorMsg: 'Email may not be empty'\n        };\n      }\n\n      const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n\n      if (!EMAIL_REGEX.test(email)) {\n        return {\n          validateStatus: 'error',\n          errorMsg: 'Email not valid'\n        };\n      }\n\n      if (email.length > EMAIL_MAX_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\n        };\n      }\n\n      return {\n        validateStatus: null,\n        errorMsg: null\n      };\n    };\n\n    this.validateUsername = username => {\n      if (username.length < USERNAME_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\n        };\n      } else if (username.length > USERNAME_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\n        };\n      } else {\n        return {\n          validateStatus: null,\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validateContactno = contactno => {\n      if (contactno.length < CONTACTNO_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `Name is too short (Minimum ${CONTACTNO_MIN_LENGTH} characters needed.)`\n        };\n      } else if (contactno.length > CONTACTNO_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: `Contact number is incorrect (Maximum ${CONTACTNO_MAX_LENGTH} characters allowed.)`\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validatePassword = password => {\n      if (password.length < PASSWORD_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\n        };\n      } else if (password.length > PASSWORD_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          visible = _this$props.visible,\n          onCancel = _this$props.onCancel,\n          onCreate = _this$props.onCreate,\n          form = _this$props.form;\n    const getFieldDecorator = form.getFieldDecorator;\n    return React.createElement(_Modal, {\n      visible: visible,\n      title: \"Edit your Profile\",\n      okText: \"Update\",\n      onCancel: onCancel,\n      onOk: onCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(_Form, {\n      layout: \"vertical\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(_Form.Item, {\n      label: \"Full Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, getFieldDecorator('Full name', {\n      rules: [{\n        required: true,\n        message: 'Your Full Name Required'\n      }]\n    })(React.createElement(_Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"User Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, getFieldDecorator('user name', {\n      rules: [{\n        required: true,\n        message: 'User Name Required'\n      }]\n    })(React.createElement(_Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"Contact No\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, getFieldDecorator('contact no', {\n      rules: [{\n        required: true,\n        message: 'Contact number Required'\n      }]\n    })(React.createElement(_Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, getFieldDecorator('email')(React.createElement(_Input, {\n      type: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, getFieldDecorator('password')(React.createElement(_Input, {\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      className: \"collection-create-form_last-form-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, getFieldDecorator('modifier', {\n      initialValue: 'public'\n    })(React.createElement(_Radio.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(_Radio, {\n      value: \"public\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Public\"), React.createElement(_Radio, {\n      value: \"private\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Private\"))))));\n  } // Validation Functions\n\n\n  validateUsernameAvailability() {\n    // First check for client side errors in username\n    const usernameValue = this.state.username.value;\n    const usernameValidation = this.validateUsername(usernameValue);\n\n    if (usernameValidation.validateStatus === 'error') {\n      this.setState({\n        username: _objectSpread({\n          value: usernameValue\n        }, usernameValidation)\n      });\n      return;\n    }\n\n    this.setState({\n      username: {\n        value: usernameValue,\n        validateStatus: 'validating',\n        errorMsg: null\n      }\n    });\n    checkUsernameAvailability(usernameValue).then(response => {\n      if (response.available) {\n        this.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: 'success',\n            errorMsg: null\n          }\n        });\n      } else {\n        this.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: 'error',\n            errorMsg: 'This username is already taken'\n          }\n        });\n      }\n    }).catch(error => {\n      // Marking validateStatus as success, Form will be recchecked at server\n      this.setState({\n        username: {\n          value: usernameValue,\n          validateStatus: 'success',\n          errorMsg: null\n        }\n      });\n    });\n  }\n\n  validateEmailAvailability() {\n    // First check for client side errors in email\n    const emailValue = this.state.email.value;\n    const emailValidation = this.validateEmail(emailValue);\n\n    if (emailValidation.validateStatus === 'error') {\n      this.setState({\n        email: _objectSpread({\n          value: emailValue\n        }, emailValidation)\n      });\n      return;\n    }\n\n    this.setState({\n      email: {\n        value: emailValue,\n        validateStatus: 'validating',\n        errorMsg: null\n      }\n    });\n    checkEmailAvailability(emailValue).then(response => {\n      if (response.available) {\n        this.setState({\n          email: {\n            value: emailValue,\n            validateStatus: 'success',\n            errorMsg: null\n          }\n        });\n      } else {\n        this.setState({\n          email: {\n            value: emailValue,\n            validateStatus: 'error',\n            errorMsg: 'This Email is already registered'\n          }\n        });\n      }\n    }).catch(error => {\n      // Marking validateStatus as success, Form will be recchecked at server\n      this.setState({\n        email: {\n          value: emailValue,\n          validateStatus: 'success',\n          errorMsg: null\n        }\n      });\n    });\n  }\n\n}, _temp)); // const TabPane = Tabs.TabPane;\n\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n\n    this.showModal = () => {\n      this.setState({\n        visible: true\n      });\n    };\n\n    this.handleCancel = () => {\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.handleCreate = () => {\n      const form = this.formRef.props.form;\n      form.validateFields((err, values) => {\n        if (err) {\n          return;\n        }\n\n        console.log('Received values of form: ', values);\n        form.resetFields();\n        this.setState({\n          visible: false\n        });\n      });\n    };\n\n    this.saveFormRef = formRef => {\n      this.formRef = formRef;\n    };\n\n    this.state = {\n      user: null,\n      isLoading: false\n    };\n    this.loadUserProfile = this.loadUserProfile.bind(this);\n  }\n\n  loadUserProfile(username) {\n    this.setState({\n      isLoading: true\n    });\n    getUserProfile(username).then(response => {\n      this.setState({\n        user: response,\n        isLoading: false\n      });\n    }).catch(error => {\n      if (error.status === 404) {\n        this.setState({\n          notFound: true,\n          isLoading: false\n        });\n      } else {\n        this.setState({\n          serverError: true,\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    const username = this.props.match.params.username;\n    this.loadUserProfile(username);\n  }\n\n  componentDidUpdate(nextProps) {\n    if (this.props.match.params.username !== nextProps.match.params.username) {\n      this.loadUserProfile(nextProps.match.params.username);\n    }\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return React.createElement(LoadingIndicator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      });\n    }\n\n    if (this.state.notFound) {\n      return React.createElement(NotFound, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      });\n    }\n\n    if (this.state.serverError) {\n      return React.createElement(ServerError, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      });\n    } // const tabBarStyle = {\n    //     textAlign: 'center'\n    // };\n\n\n    return React.createElement(\"div\", {\n      className: \"profile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, this.state.user ? React.createElement(\"div\", {\n      className: \"user-profile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"user-details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"user-avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(_Avatar, {\n      className: \"user-avatar-circle\",\n      style: {\n        backgroundColor: getAvatarColor(this.state.user.name)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, this.state.user.name[0].toUpperCase())), React.createElement(\"div\", {\n      className: \"user-summary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"full-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, this.state.user.name), React.createElement(\"div\", {\n      className: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, \"@\", this.state.user.username), React.createElement(\"div\", {\n      className: \"contactno\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, \"Contact No : \", this.state.user.contactno), React.createElement(\"div\", {\n      className: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, \"Email Address : \", this.state.user.email)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, React.createElement(_Button, {\n      type: \"primary\",\n      onClick: this.showModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, \"Edit Profile\"), React.createElement(CollectionCreateForm, {\n      wrappedComponentRef: this.saveFormRef,\n      visible: this.state.visible,\n      onCancel: this.handleCancel,\n      onCreate: this.handleCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    })))) : null);\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/home/amavi/projects/demo2/customer-food-app-client/src/user/profile/Profile.js"],"names":["React","Component","checkEmailAvailability","checkUsernameAvailability","getUserProfile","getAvatarColor","LoadingIndicator","NotFound","ServerError","Link","Route","NAME_MIN_LENGTH","NAME_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","EMAIL_MAX_LENGTH","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","CONTACTNO_MAX_LENGTH","CONTACTNO_MIN_LENGTH","CollectionCreateForm","create","name","validateName","length","validateStatus","errorMsg","validationStatus","validateEmail","email","EMAIL_REGEX","RegExp","test","validateUsername","username","validateContactno","contactno","validatePassword","password","render","props","visible","onCancel","onCreate","form","getFieldDecorator","rules","required","message","initialValue","validateUsernameAvailability","usernameValue","state","value","usernameValidation","setState","then","response","available","catch","error","validateEmailAvailability","emailValue","emailValidation","Profile","constructor","showModal","handleCancel","handleCreate","formRef","validateFields","err","values","console","log","resetFields","saveFormRef","user","isLoading","loadUserProfile","bind","status","notFound","serverError","componentDidMount","match","params","componentDidUpdate","nextProps","backgroundColor","toUpperCase"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import PollList from '../../poll/PollList';\nimport {checkEmailAvailability, checkUsernameAvailability, getUserProfile} from '../../util/APIUtils';\nimport { Avatar } from 'antd';\nimport { Button, Modal, Form, Input, Radio } from 'antd';\nimport { getAvatarColor } from '../../util/Colors';\n// import { formatDate } from '../../util/Helpers';\nimport LoadingIndicator  from '../../common/LoadingIndicator';\nimport './Profile.css';\nimport NotFound from '../../common/NotFound';\nimport ServerError from '../../common/ServerError';\nimport {Link} from \"react-router-dom\";\n // import EditProfile from '../EditProfile/EditProfile';\nimport Route from \"react-router-dom/es/Route\";\n\nimport {\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH,\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\n    EMAIL_MAX_LENGTH,\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH,CONTACTNO_MAX_LENGTH, CONTACTNO_MIN_LENGTH\n} from '../../../src/constants';\n\nconst CollectionCreateForm = Form.create({ name: 'form_in_modal' })(\n    // eslint-disable-next-line\n    // class Profile extends Component {\n    //     constructor(props) {\n    //         super(props);\n    //         this.state = {\n    //             name: {\n    //                 value: ''\n    //             },\n    //             username: {\n    //                 value: ''\n    //             },\n    //             email: {\n    //                 value: ''\n    //             },\n    //             password: {\n    //                 value: ''\n    //             },\n    //             contactno: {\n    //                 value: ''\n    //             }\n    //         }\n    //         this.handleInputChange = this.handleInputChange.bind(this);\n    //         this.handleSubmit = this.handleSubmit.bind(this);\n    //         this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\n    //         this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\n    //         this.isFormInvalid = this.isFormInvalid.bind(this);\n    //     }\n\n\n\n    class extends React.Component {\n        render() {\n            const { visible, onCancel, onCreate, form } = this.props;\n            const { getFieldDecorator } = form;\n            return (\n                <Modal\n            visible={visible}\n            title=\"Edit your Profile\"\n            okText=\"Update\"\n            onCancel={onCancel}\n            onOk={onCreate}\n                >\n                <Form layout=\"vertical\">\n                <Form.Item label=\"Full Name\">\n                {getFieldDecorator('Full name', {\n                rules: [{ required: true, message: 'Your Full Name Required' }],\n            })(<Input />)}\n        </Form.Item>\n\n                <Form.Item label=\"User Name\">\n                {getFieldDecorator('user name', {\n                rules: [{ required: true, message: 'User Name Required' }],\n            })(<Input />)}\n        </Form.Item>\n            <Form.Item label=\"Contact No\">\n                {getFieldDecorator('contact no', {\n                rules: [{ required: true, message: 'Contact number Required' }],\n                    \n            })(<Input />)}\n            </Form.Item>\n            <Form.Item label=\"Email\">\n                {getFieldDecorator('email')(<Input type=\"email\" />)}\n        </Form.Item>\n            <Form.Item label=\"Password\">\n                {getFieldDecorator('password')(<Input type=\"password\" />)}\n        </Form.Item>\n\n            <Form.Item className=\"collection-create-form_last-form-item\">\n                {getFieldDecorator('modifier', {\n                initialValue: 'public',\n            })(\n            <Radio.Group>\n            <Radio value=\"public\">Public</Radio>\n                <Radio value=\"private\">Private</Radio>\n                </Radio.Group>,\n        )}\n        </Form.Item>\n            </Form>\n            </Modal>\n        );\n        }\n        // Validation Functions\n\n        validateName = (name) => {\n            if(name.length < NAME_MIN_LENGTH) {\n                return {\n                    validateStatus: 'error',\n                    errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\n                }\n            } else if (name.length > NAME_MAX_LENGTH) {\n                return {\n                    validationStatus: 'error',\n                    errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\n                }\n            } else {\n                return {\n                    validateStatus: 'success',\n                    errorMsg: null,\n                };\n            }\n        }\n\n        validateEmail = (email) => {\n            if(!email) {\n                return {\n                    validateStatus: 'error',\n                    errorMsg: 'Email may not be empty'\n                }\n            }\n\n            const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n            if(!EMAIL_REGEX.test(email)) {\n                return {\n                    validateStatus: 'error',\n                    errorMsg: 'Email not valid'\n                }\n            }\n\n            if(email.length > EMAIL_MAX_LENGTH) {\n                return {\n                    validateStatus: 'error',\n                    errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\n                }\n            }\n\n            return {\n                validateStatus: null,\n                errorMsg: null\n            }\n        }\n\n        validateUsername = (username) => {\n            if(username.length < USERNAME_MIN_LENGTH) {\n                return {\n                    validateStatus: 'error',\n                    errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\n                }\n            } else if (username.length > USERNAME_MAX_LENGTH) {\n                return {\n                    validationStatus: 'error',\n                    errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\n                }\n            } else {\n                return {\n                    validateStatus: null,\n                    errorMsg: null\n                }\n            }\n        }\n\n        validateContactno = (contactno) => {\n            if(contactno.length < CONTACTNO_MIN_LENGTH) {\n                return {\n                    validateStatus: 'error',\n                    errorMsg: `Name is too short (Minimum ${CONTACTNO_MIN_LENGTH} characters needed.)`\n                }\n            } else if (contactno.length > CONTACTNO_MAX_LENGTH) {\n                return {\n                    validationStatus: 'error',\n                    errorMsg: `Contact number is incorrect (Maximum ${CONTACTNO_MAX_LENGTH} characters allowed.)`\n                }\n            } else {\n                return {\n                    validateStatus: 'success',\n                    errorMsg: null,\n                };\n            }\n        }\n\n\n        validateUsernameAvailability() {\n            // First check for client side errors in username\n            const usernameValue = this.state.username.value;\n            const usernameValidation = this.validateUsername(usernameValue);\n\n            if(usernameValidation.validateStatus === 'error') {\n                this.setState({\n                    username: {\n                        value: usernameValue,\n                        ...usernameValidation\n                    }\n                });\n                return;\n            }\n\n            this.setState({\n                username: {\n                    value: usernameValue,\n                    validateStatus: 'validating',\n                    errorMsg: null\n                }\n            });\n\n            checkUsernameAvailability(usernameValue)\n                .then(response => {\n                    if(response.available) {\n                        this.setState({\n                            username: {\n                                value: usernameValue,\n                                validateStatus: 'success',\n                                errorMsg: null\n                            }\n                        });\n                    } else {\n                        this.setState({\n                            username: {\n                                value: usernameValue,\n                                validateStatus: 'error',\n                                errorMsg: 'This username is already taken'\n                            }\n                        });\n                    }\n                }).catch(error => {\n                // Marking validateStatus as success, Form will be recchecked at server\n                this.setState({\n                    username: {\n                        value: usernameValue,\n                        validateStatus: 'success',\n                        errorMsg: null\n                    }\n                });\n            });\n        }\n\n        validateEmailAvailability() {\n            // First check for client side errors in email\n            const emailValue = this.state.email.value;\n            const emailValidation = this.validateEmail(emailValue);\n\n            if(emailValidation.validateStatus === 'error') {\n                this.setState({\n                    email: {\n                        value: emailValue,\n                        ...emailValidation\n                    }\n                });\n                return;\n            }\n\n            this.setState({\n                email: {\n                    value: emailValue,\n                    validateStatus: 'validating',\n                    errorMsg: null\n                }\n            });\n\n            checkEmailAvailability(emailValue)\n                .then(response => {\n                    if(response.available) {\n                        this.setState({\n                            email: {\n                                value: emailValue,\n                                validateStatus: 'success',\n                                errorMsg: null\n                            }\n                        });\n                    } else {\n                        this.setState({\n                            email: {\n                                value: emailValue,\n                                validateStatus: 'error',\n                                errorMsg: 'This Email is already registered'\n                            }\n                        });\n                    }\n                }).catch(error => {\n                // Marking validateStatus as success, Form will be recchecked at server\n                this.setState({\n                    email: {\n                        value: emailValue,\n                        validateStatus: 'success',\n                        errorMsg: null\n                    }\n                });\n            });\n        }\n\n        validatePassword = (password) => {\n            if(password.length < PASSWORD_MIN_LENGTH) {\n                return {\n                    validateStatus: 'error',\n                    errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\n                }\n            } else if (password.length > PASSWORD_MAX_LENGTH) {\n                return {\n                    validationStatus: 'error',\n                    errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\n                }\n            } else {\n                return {\n                    validateStatus: 'success',\n                    errorMsg: null,\n                };\n            }\n        }\n    },\n);\n\n\n\n// const TabPane = Tabs.TabPane;\nclass Profile extends Component {\n    state = {\n        visible: false,\n    };\n    showModal = () => {\n        this.setState({ visible: true });\n    };\n    handleCancel = () => {\n        this.setState({ visible: false });\n    };\n    handleCreate = () => {\n        const { form } = this.formRef.props;\n        form.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n            console.log('Received values of form: ', values);\n            form.resetFields();\n            this.setState({ visible: false });\n        });\n    };\n    saveFormRef = formRef => {\n        this.formRef = formRef;\n    };\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: null,\n            isLoading: false\n        }\n        this.loadUserProfile = this.loadUserProfile.bind(this);\n    }\n    loadUserProfile(username) {\n        this.setState({\n            isLoading: true\n        });\n        getUserProfile(username)\n            .then(response => {\n                this.setState({\n                    user: response,\n                    isLoading: false\n                });\n            }).catch(error => {\n            if(error.status === 404) {\n                this.setState({\n                    notFound: true,\n                    isLoading: false\n                });\n            } else {\n                this.setState({\n                    serverError: true,\n                    isLoading: false\n                });\n            }\n        });\n    }\n    componentDidMount() {\n        const username = this.props.match.params.username;\n        this.loadUserProfile(username);\n    }\n    componentDidUpdate(nextProps) {\n        if(this.props.match.params.username !== nextProps.match.params.username) {\n            this.loadUserProfile(nextProps.match.params.username);\n        }\n    }\n    render() {\n        if(this.state.isLoading) {\n            return <LoadingIndicator />;\n        }\n        if(this.state.notFound) {\n            return <NotFound />;\n        }\n        if(this.state.serverError) {\n            return <ServerError />;\n        }\n        // const tabBarStyle = {\n        //     textAlign: 'center'\n        // };\n        return (\n            <div className=\"profile\">\n        {\n            this.state.user ? (\n            <div className=\"user-profile\">\n            <div className=\"user-details\">\n            <div className=\"user-avatar\">\n            <Avatar className=\"user-avatar-circle\" style={{ backgroundColor: getAvatarColor(this.state.user.name)}}>\n        {this.state.user.name[0].toUpperCase()}\n    </Avatar>\n        </div>\n        <div className=\"user-summary\">\n            <div className=\"full-name\">{this.state.user.name}</div>\n        <div className=\"username\">@{this.state.user.username}</div>\n        <div className=\"contactno\">Contact No : {this.state.user.contactno}</div>\n        <div className=\"email\">Email Address : {this.state.user.email}</div>\n        </div>\n\n        <div>\n        <Button type=\"primary\" onClick={this.showModal}>\n        Edit Profile\n        </Button>\n        <CollectionCreateForm\n        wrappedComponentRef={this.saveFormRef}\n        visible={this.state.visible}\n        onCancel={this.handleCancel}\n        onCreate={this.handleCreate}\n        />\n        </div>\n        </div>\n        </div>\n    ): null\n    }\n    </div>\n    );\n    }\n}\nexport default Profile;"]},"metadata":{},"sourceType":"module"}