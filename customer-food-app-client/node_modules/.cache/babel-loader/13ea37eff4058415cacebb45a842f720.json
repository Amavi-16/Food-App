{"ast":null,"code":"import \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\nimport \"antd/es/layout/style\";\nimport _Layout from \"antd/es/layout\";\nvar _jsxFileName = \"/home/pradeep/projects/fda1/myapp/src/app/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Route, withRouter, Switch } from 'react-router-dom';\nimport { getCurrentUser } from '../util/APIUtils';\nimport { ACCESS_TOKEN } from '../constants';\nimport PollList from '../poll/PollList';\nimport NewPoll from '../poll/NewPoll';\nimport Login from '../user/login/Login';\nimport Signup from '../user/signup/Signup';\nimport Profile from '../user/profile/Profile';\nimport AppHeader from '../common/AppHeader';\nimport NotFound from '../common/NotFound';\nimport LoadingIndicator from '../common/LoadingIndicator';\nimport PrivateRoute from '../common/PrivateRoute';\nconst Content = _Layout.Content;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      isAuthenticated: false,\n      isLoading: false\n    };\n    this.handleLogout = this.handleLogout.bind(this);\n    this.loadCurrentUser = this.loadCurrentUser.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n\n    _notification.config({\n      placement: 'topRight',\n      top: 70,\n      duration: 3\n    });\n  }\n\n  loadCurrentUser() {\n    this.setState({\n      isLoading: true\n    });\n    getCurrentUser().then(response => {\n      this.setState({\n        currentUser: response,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    }).catch(error => {\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.loadCurrentUser();\n  }\n\n  handleLogout(redirectTo = \"/\", notificationType = \"success\", description = \"You're successfully logged out.\") {\n    localStorage.removeItem(ACCESS_TOKEN);\n    this.setState({\n      currentUser: null,\n      isAuthenticated: false\n    });\n    this.props.history.push(redirectTo);\n\n    _notification[notificationType]({\n      message: 'Polling App',\n      description: description\n    });\n  }\n\n  handleLogin() {\n    _notification.success({\n      message: 'Polling App',\n      description: \"You're successfully logged in.\"\n    });\n\n    this.loadCurrentUser();\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return React.createElement(LoadingIndicator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(_Layout, {\n      className: \"app-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(AppHeader, {\n      isAuthenticated: this.state.isAuthenticated,\n      currentUser: this.state.currentUser,\n      onLogout: this.handleLogout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Content, {\n      className: \"app-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: props => React.createElement(PollList, Object.assign({\n        isAuthenticated: this.state.isAuthenticated,\n        currentUser: this.state.currentUser,\n        handleLogout: this.handleLogout\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/login\",\n      render: props => React.createElement(Login, Object.assign({\n        onLogin: this.handleLogin\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/signup\",\n      component: Signup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/users/:username\",\n      render: props => React.createElement(Profile, Object.assign({\n        isAuthenticated: this.state.isAuthenticated,\n        currentUser: this.state.currentUser\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(PrivateRoute, {\n      authenticated: this.state.isAuthenticated,\n      path: \"/poll/new\",\n      component: NewPoll,\n      handleLogout: this.handleLogout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(Route, {\n      component: NotFound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/home/pradeep/projects/fda1/myapp/src/app/App.js"],"names":["React","Component","Route","withRouter","Switch","getCurrentUser","ACCESS_TOKEN","PollList","NewPoll","Login","Signup","Profile","AppHeader","NotFound","LoadingIndicator","PrivateRoute","Content","App","constructor","props","state","currentUser","isAuthenticated","isLoading","handleLogout","bind","loadCurrentUser","handleLogin","config","placement","top","duration","setState","then","response","catch","error","componentDidMount","redirectTo","notificationType","description","localStorage","removeItem","history","push","message","success","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {\n    Route,\n    withRouter,\n    Switch\n} from 'react-router-dom';\n\nimport { getCurrentUser } from '../util/APIUtils';\nimport { ACCESS_TOKEN } from '../constants';\n\nimport PollList from '../poll/PollList';\nimport NewPoll from '../poll/NewPoll';\nimport Login from '../user/login/Login';\nimport Signup from '../user/signup/Signup';\nimport Profile from '../user/profile/Profile';\nimport AppHeader from '../common/AppHeader';\nimport NotFound from '../common/NotFound';\nimport LoadingIndicator from '../common/LoadingIndicator';\nimport PrivateRoute from '../common/PrivateRoute';\n\nimport { Layout, notification } from 'antd';\nconst { Content } = Layout;\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentUser: null,\n            isAuthenticated: false,\n            isLoading: false\n        }\n        this.handleLogout = this.handleLogout.bind(this);\n        this.loadCurrentUser = this.loadCurrentUser.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n\n        notification.config({\n            placement: 'topRight',\n            top: 70,\n            duration: 3,\n        });\n    }\n\n    loadCurrentUser() {\n        this.setState({\n            isLoading: true\n        });\n        getCurrentUser()\n            .then(response => {\n                this.setState({\n                    currentUser: response,\n                    isAuthenticated: true,\n                    isLoading: false\n                });\n            }).catch(error => {\n            this.setState({\n                isLoading: false\n            });\n        });\n    }\n\n    componentDidMount() {\n        this.loadCurrentUser();\n    }\n\n    handleLogout(redirectTo=\"/\", notificationType=\"success\", description=\"You're successfully logged out.\") {\n        localStorage.removeItem(ACCESS_TOKEN);\n\n        this.setState({\n            currentUser: null,\n            isAuthenticated: false\n        });\n\n        this.props.history.push(redirectTo);\n\n        notification[notificationType]({\n            message: 'Polling App',\n            description: description,\n        });\n    }\n\n    handleLogin() {\n        notification.success({\n            message: 'Polling App',\n            description: \"You're successfully logged in.\",\n        });\n        this.loadCurrentUser();\n        this.props.history.push(\"/\");\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return <LoadingIndicator />\n        }\n        return (\n            <Layout className=\"app-container\">\n                <AppHeader isAuthenticated={this.state.isAuthenticated}\n                           currentUser={this.state.currentUser}\n                           onLogout={this.handleLogout} />\n\n                <Content className=\"app-content\">\n                    <div className=\"container\">\n                        <Switch>\n                            <Route exact path=\"/\"\n                                   render={(props) => <PollList isAuthenticated={this.state.isAuthenticated}\n                                                                currentUser={this.state.currentUser} handleLogout={this.handleLogout} {...props} />}>\n                            </Route>\n                            <Route path=\"/login\"\n                                   render={(props) => <Login onLogin={this.handleLogin} {...props} />}></Route>\n                            <Route path=\"/signup\" component={Signup}></Route>\n                            <Route path=\"/users/:username\"\n                                   render={(props) => <Profile isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} {...props}  />}>\n                            </Route>\n                            <PrivateRoute authenticated={this.state.isAuthenticated} path=\"/poll/new\" component={NewPoll} handleLogout={this.handleLogout}></PrivateRoute>\n                            <Route component={NotFound}></Route>\n                        </Switch>\n                    </div>\n                </Content>\n            </Layout>\n        );\n    }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}