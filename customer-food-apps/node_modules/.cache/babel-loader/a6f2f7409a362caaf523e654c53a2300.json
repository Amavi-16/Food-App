{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\nimport _objectSpread from \"/home/amavi/projects/demo2/customer-food-app-client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"/home/amavi/projects/demo2/customer-food-app-client/src/user/signup/Signup.js\";\nimport React, { Component } from 'react';\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../../util/APIUtils';\nimport './Signup.css';\nimport { Link } from 'react-router-dom';\nimport { NAME_MIN_LENGTH, NAME_MAX_LENGTH, USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH, PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH } from '../../../../customer-food-app-client/src/constants';\nconst FormItem = _Form.Item;\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.validateName = name => {\n      if (name.length < NAME_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\n        };\n      } else if (name.length > NAME_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validateEmail = email => {\n      if (!email) {\n        return {\n          validateStatus: 'error',\n          errorMsg: 'Email may not be empty'\n        };\n      }\n\n      const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n\n      if (!EMAIL_REGEX.test(email)) {\n        return {\n          validateStatus: 'error',\n          errorMsg: 'Email not valid'\n        };\n      }\n\n      if (email.length > EMAIL_MAX_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\n        };\n      }\n\n      return {\n        validateStatus: null,\n        errorMsg: null\n      };\n    };\n\n    this.validateUsername = username => {\n      if (username.length < USERNAME_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\n        };\n      } else if (username.length > USERNAME_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\n        };\n      } else {\n        return {\n          validateStatus: null,\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validatePassword = password => {\n      if (password.length < PASSWORD_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\n        };\n      } else if (password.length > PASSWORD_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n\n    this.state = {\n      name: {\n        value: ''\n      },\n      username: {\n        value: ''\n      },\n      email: {\n        value: ''\n      },\n      password: {\n        value: ''\n      },\n      contactno: {\n        value: ''\n      }\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\n    this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\n    this.isFormInvalid = this.isFormInvalid.bind(this);\n  }\n\n  handleInputChange(event, validationFun) {\n    const target = event.target;\n    const inputName = target.name;\n    const inputValue = target.value;\n    this.setState({\n      [inputName]: _objectSpread({\n        value: inputValue\n      }, validationFun(inputValue))\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const signupRequest = {\n      name: this.state.name.value,\n      email: this.state.email.value,\n      username: this.state.username.value,\n      password: this.state.password.value,\n      contactno: this.state.contactno.value\n    };\n    signup(signupRequest).then(response => {\n      _notification.success({\n        message: 'Food Delivery  App',\n        description: \"Thank you! You're successfully registered. Please Login to continue!\"\n      });\n\n      this.props.history.push(\"/login\");\n    }).catch(error => {\n      _notification.error({\n        message: 'Food Delivery App',\n        description: error.message || 'Sorry! Something went wrong. Please try again!'\n      });\n    });\n  }\n\n  isFormInvalid() {\n    return !(this.state.name.validateStatus === 'success' && this.state.username.validateStatus === 'success' && this.state.email.validateStatus === 'success' && this.state.password.validateStatus === 'success' && this.state.contactno.validateStatus === 'success');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"signup-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"page-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Sign Up\"), React.createElement(\"div\", {\n      className: \"signup-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(_Form, {\n      onSubmit: this.handleSubmit,\n      className: \"signup-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(FormItem, {\n      label: \"Full Name\",\n      validateStatus: this.state.name.validateStatus,\n      help: this.state.name.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      size: \"large\",\n      name: \"name\",\n      autoComplete: \"off\",\n      placeholder: \" Full name\",\n      value: this.state.name.value,\n      onChange: event => this.handleInputChange(event, this.validateName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Username\",\n      hasFeedback: true,\n      validateStatus: this.state.username.validateStatus,\n      help: this.state.username.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      size: \"large\",\n      name: \"username\",\n      autoComplete: \"off\",\n      placeholder: \"A unique username\",\n      value: this.state.username.value,\n      onBlur: this.validateUsernameAvailability,\n      onChange: event => this.handleInputChange(event, this.validateUsername),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Email\",\n      hasFeedback: true,\n      validateStatus: this.state.email.validateStatus,\n      help: this.state.email.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      size: \"large\",\n      name: \"email\",\n      type: \"email\",\n      autoComplete: \"off\",\n      placeholder: \"Your email\",\n      value: this.state.email.value,\n      onBlur: this.validateEmailAvailability,\n      onChange: event => this.handleInputChange(event, this.validateEmail),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Password\",\n      validateStatus: this.state.password.validateStatus,\n      help: this.state.password.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      size: \"large\",\n      name: \"password\",\n      type: \"password\",\n      autoComplete: \"off\",\n      placeholder: \"Should 6 to 20 characters\",\n      value: this.state.password.value,\n      onChange: event => this.handleInputChange(event, this.validatePassword),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(FormItem, {\n      label: \"Contact No\",\n      validateStatus: this.state.name.validateStatus,\n      help: this.state.name.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      size: \"large\",\n      name: \"contactno\",\n      autoComplete: \"off\",\n      placeholder: \" Contact No\",\n      value: this.state.name.value,\n      onChange: event => this.handleInputChange(event, this.validateName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })), React.createElement(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      size: \"large\",\n      className: \"signup-form-button\",\n      disabled: this.isFormInvalid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Sign up\"), \"Already registed? \", React.createElement(Link, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Login now!\")))));\n  } // Validation Functions\n\n\n  validateUsernameAvailability() {\n    // First check for client side errors in username\n    const usernameValue = this.state.username.value;\n    const usernameValidation = this.validateUsername(usernameValue);\n\n    if (usernameValidation.validateStatus === 'error') {\n      this.setState({\n        username: _objectSpread({\n          value: usernameValue\n        }, usernameValidation)\n      });\n      return;\n    }\n\n    this.setState({\n      username: {\n        value: usernameValue,\n        validateStatus: 'validating',\n        errorMsg: null\n      }\n    });\n    checkUsernameAvailability(usernameValue).then(response => {\n      if (response.available) {\n        this.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: 'success',\n            errorMsg: null\n          }\n        });\n      } else {\n        this.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: 'error',\n            errorMsg: 'This username is already taken'\n          }\n        });\n      }\n    }).catch(error => {\n      // Marking validateStatus as success, Form will be recchecked at server\n      this.setState({\n        username: {\n          value: usernameValue,\n          validateStatus: 'success',\n          errorMsg: null\n        }\n      });\n    });\n  }\n\n  validateEmailAvailability() {\n    // First check for client side errors in email\n    const emailValue = this.state.email.value;\n    const emailValidation = this.validateEmail(emailValue);\n\n    if (emailValidation.validateStatus === 'error') {\n      this.setState({\n        email: _objectSpread({\n          value: emailValue\n        }, emailValidation)\n      });\n      return;\n    }\n\n    this.setState({\n      email: {\n        value: emailValue,\n        validateStatus: 'validating',\n        errorMsg: null\n      }\n    });\n    checkEmailAvailability(emailValue).then(response => {\n      if (response.available) {\n        this.setState({\n          email: {\n            value: emailValue,\n            validateStatus: 'success',\n            errorMsg: null\n          }\n        });\n      } else {\n        this.setState({\n          email: {\n            value: emailValue,\n            validateStatus: 'error',\n            errorMsg: 'This Email is already registered'\n          }\n        });\n      }\n    }).catch(error => {\n      // Marking validateStatus as success, Form will be recchecked at server\n      this.setState({\n        email: {\n          value: emailValue,\n          validateStatus: 'success',\n          errorMsg: null\n        }\n      });\n    });\n  }\n\n}\n\nexport default Signup;","map":{"version":3,"sources":["/home/amavi/projects/demo2/customer-food-app-client/src/user/signup/Signup.js"],"names":["React","Component","signup","checkUsernameAvailability","checkEmailAvailability","Link","NAME_MIN_LENGTH","NAME_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","EMAIL_MAX_LENGTH","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","FormItem","Item","Signup","constructor","props","validateName","name","length","validateStatus","errorMsg","validationStatus","validateEmail","email","EMAIL_REGEX","RegExp","test","validateUsername","username","validatePassword","password","state","value","contactno","handleInputChange","bind","handleSubmit","validateUsernameAvailability","validateEmailAvailability","isFormInvalid","event","validationFun","target","inputName","inputValue","setState","preventDefault","signupRequest","then","response","success","message","description","history","push","catch","error","render","usernameValue","usernameValidation","available","emailValue","emailValidation"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../../util/APIUtils';\nimport './Signup.css';\nimport { Link } from 'react-router-dom';\nimport {\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH,\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\n    EMAIL_MAX_LENGTH,\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\n} from '../../../../customer-food-app-client/src/constants';\n\nimport { Form, Input, Button, notification } from 'antd';\nconst FormItem = Form.Item;\n\nclass Signup extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: {\n                value: ''\n            },\n            username: {\n                value: ''\n            },\n            email: {\n                value: ''\n            },\n            password: {\n                value: ''\n            },\n            contactno: {\n                value: ''\n            }\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\n        this.isFormInvalid = this.isFormInvalid.bind(this);\n    }\n\n    handleInputChange(event, validationFun) {\n        const target = event.target;\n        const inputName = target.name;\n        const inputValue = target.value;\n\n        this.setState({\n            [inputName] : {\n                value: inputValue,\n                ...validationFun(inputValue)\n            }\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        const signupRequest = {\n            name: this.state.name.value,\n            email: this.state.email.value,\n            username: this.state.username.value,\n            password: this.state.password.value,\n            contactno: this.state.contactno.value,\n        };\n        signup(signupRequest)\n            .then(response => {\n                notification.success({\n                    message: 'Food Delivery  App',\n                    description: \"Thank you! You're successfully registered. Please Login to continue!\",\n                });\n                this.props.history.push(\"/login\");\n            }).catch(error => {\n            notification.error({\n                message: 'Food Delivery App',\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\n            });\n        });\n    }\n\n    isFormInvalid() {\n        return !(this.state.name.validateStatus === 'success' &&\n            this.state.username.validateStatus === 'success' &&\n            this.state.email.validateStatus === 'success' &&\n            this.state.password.validateStatus === 'success' &&\n            this.state.contactno.validateStatus === 'success'\n\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"signup-container\">\n            <h1 className=\"page-title\">Sign Up</h1>\n        <div className=\"signup-content\">\n            <Form onSubmit={this.handleSubmit} className=\"signup-form\">\n            <FormItem\n        label=\"Full Name\"\n        validateStatus={this.state.name.validateStatus}\n        help={this.state.name.errorMsg}>\n    <Input\n        size=\"large\"\n        name=\"name\"\n        autoComplete=\"off\"\n        placeholder=\" Full name\"\n        value={this.state.name.value}\n        onChange={(event) => this.handleInputChange(event, this.validateName)} />\n        </FormItem>\n        <FormItem label=\"Username\"\n        hasFeedback\n        validateStatus={this.state.username.validateStatus}\n        help={this.state.username.errorMsg}>\n    <Input\n        size=\"large\"\n        name=\"username\"\n        autoComplete=\"off\"\n        placeholder=\"A unique username\"\n        value={this.state.username.value}\n        onBlur={this.validateUsernameAvailability}\n        onChange={(event) => this.handleInputChange(event, this.validateUsername)} />\n        </FormItem>\n        <FormItem\n        label=\"Email\"\n        hasFeedback\n        validateStatus={this.state.email.validateStatus}\n        help={this.state.email.errorMsg}>\n    <Input\n        size=\"large\"\n        name=\"email\"\n        type=\"email\"\n        autoComplete=\"off\"\n        placeholder=\"Your email\"\n        value={this.state.email.value}\n        onBlur={this.validateEmailAvailability}\n        onChange={(event) => this.handleInputChange(event, this.validateEmail)} />\n        </FormItem>\n        <FormItem\n        label=\"Password\"\n        validateStatus={this.state.password.validateStatus}\n        help={this.state.password.errorMsg}>\n    <Input\n        size=\"large\"\n        name=\"password\"\n        type=\"password\"\n        autoComplete=\"off\"\n        placeholder=\"Should 6 to 20 characters\"\n        value={this.state.password.value}\n        onChange={(event) => this.handleInputChange(event, this.validatePassword)} />\n        </FormItem>\n        <FormItem>\n        <FormItem\n        label=\"Contact No\"\n        validateStatus={this.state.name.validateStatus}\n        help={this.state.name.errorMsg}>\n    <Input\n        size=\"large\"\n        name=\"contactno\"\n        autoComplete=\"off\"\n        placeholder=\" Contact No\"\n        value={this.state.name.value}\n        onChange={(event) => this.handleInputChange(event, this.validateName)} />\n        </FormItem>\n        <Button type=\"primary\"\n        htmlType=\"submit\"\n        size=\"large\"\n        className=\"signup-form-button\"\n        disabled={this.isFormInvalid()}>Sign up</Button>\n        Already registed? <Link to=\"/login\">Login now!</Link>\n        </FormItem>\n        </Form>\n        </div>\n        </div>\n    );\n    }\n\n    // Validation Functions\n\n    validateName = (name) => {\n        if(name.length < NAME_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\n            }\n        } else if (name.length > NAME_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null,\n            };\n        }\n    }\n\n    validateEmail = (email) => {\n        if(!email) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Email may not be empty'\n            }\n        }\n\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n        if(!EMAIL_REGEX.test(email)) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Email not valid'\n            }\n        }\n\n        if(email.length > EMAIL_MAX_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\n            }\n        }\n\n        return {\n            validateStatus: null,\n            errorMsg: null\n        }\n    }\n\n    validateUsername = (username) => {\n        if(username.length < USERNAME_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\n            }\n        } else if (username.length > USERNAME_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: null,\n                errorMsg: null\n            }\n        }\n    }\n\n    validateUsernameAvailability() {\n        // First check for client side errors in username\n        const usernameValue = this.state.username.value;\n        const usernameValidation = this.validateUsername(usernameValue);\n\n        if(usernameValidation.validateStatus === 'error') {\n            this.setState({\n                username: {\n                    value: usernameValue,\n                    ...usernameValidation\n                }\n            });\n            return;\n        }\n\n        this.setState({\n            username: {\n                value: usernameValue,\n                validateStatus: 'validating',\n                errorMsg: null\n            }\n        });\n\n        checkUsernameAvailability(usernameValue)\n            .then(response => {\n                if(response.available) {\n                    this.setState({\n                        username: {\n                            value: usernameValue,\n                            validateStatus: 'success',\n                            errorMsg: null\n                        }\n                    });\n                } else {\n                    this.setState({\n                        username: {\n                            value: usernameValue,\n                            validateStatus: 'error',\n                            errorMsg: 'This username is already taken'\n                        }\n                    });\n                }\n            }).catch(error => {\n            // Marking validateStatus as success, Form will be recchecked at server\n            this.setState({\n                username: {\n                    value: usernameValue,\n                    validateStatus: 'success',\n                    errorMsg: null\n                }\n            });\n        });\n    }\n\n    validateEmailAvailability() {\n        // First check for client side errors in email\n        const emailValue = this.state.email.value;\n        const emailValidation = this.validateEmail(emailValue);\n\n        if(emailValidation.validateStatus === 'error') {\n            this.setState({\n                email: {\n                    value: emailValue,\n                    ...emailValidation\n                }\n            });\n            return;\n        }\n\n        this.setState({\n            email: {\n                value: emailValue,\n                validateStatus: 'validating',\n                errorMsg: null\n            }\n        });\n\n        checkEmailAvailability(emailValue)\n            .then(response => {\n                if(response.available) {\n                    this.setState({\n                        email: {\n                            value: emailValue,\n                            validateStatus: 'success',\n                            errorMsg: null\n                        }\n                    });\n                } else {\n                    this.setState({\n                        email: {\n                            value: emailValue,\n                            validateStatus: 'error',\n                            errorMsg: 'This Email is already registered'\n                        }\n                    });\n                }\n            }).catch(error => {\n            // Marking validateStatus as success, Form will be recchecked at server\n            this.setState({\n                email: {\n                    value: emailValue,\n                    validateStatus: 'success',\n                    errorMsg: null\n                }\n            });\n        });\n    }\n\n    validatePassword = (password) => {\n        if(password.length < PASSWORD_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\n            }\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null,\n            };\n        }\n    }\n\n}\n\nexport default Signup;"]},"metadata":{},"sourceType":"module"}